---
- name: Test OS for WSL2
  shell: grep -qE "(Microsoft|WSL|microsoft-standard-WSL2)" /proc/version
  register: WSL
  ignore_errors: True
  no_log: True
  args:
      warn: False

- name: Change sudo group to not need passwords
  lineinfile: dest=/etc/sudoers state=present line="Defaults\texempt_group=sudo"

- name: Set DNS checking to off
  lineinfile: line="UseDNS no" dest=/etc/ssh/sshd_config state=present

- name: Set password access to false
  lineinfile: line="GSSAPIAuthentication no" dest=/etc/ssh/sshd_config state=present

- name: Set password access to false
  lineinfile: regexp="^PasswordAuthentication " line="PasswordAuthentication no" dest=/etc/ssh/sshd_config state=present

- name: Install packages that assist with security
  apt: 
    state: present
    pkg: "{{ items }}"
  vars:
    items:
    - ufw
    - fail2ban
    - unattended-upgrades
    - logwatch

- name: Install packages needed to relay email reports
  apt: 
    state: present
    pkg: "{{ items }}"
  vars:
    items:
    - postfix
    - mailutils
    - libsasl2-2
    - ca-certificates
    - libsasl2-modules

- name: Setup automatic periodic apt updates
  lineinfile: dest=/etc/apt/apt.conf.d/10periodic line="APT::Periodic::Update-Package-Lists \"1\";" state=present

- name: Setup automatic periodic apt package downloads
  lineinfile: dest=/etc/apt/apt.conf.d/10periodic state=present line="APT::Periodic::Download-Upgradeable-Packages \"1\";"

- name: Setup automatic periodic apt package auto clean
  lineinfile: dest=/etc/apt/apt.conf.d/10periodic state=present line="APT::Periodic::AutocleanInterval \"7\";"

# ufw supports connection rate limiting, which is useful for protecting
# against brute-force login attacks. ufw will deny connections if an IP
# address has attempted to initiate 6 or more connections in the last
# 30 seconds. See  http://www.debian-administration.org/articles/187
# for details. Typical usage is:
- name: Allow ssh traffic
  ufw: rule=limit port={{ ssh_port | default("22") }} proto=tcp
  notify:
    - Restart ufw

# Allow OpenSSH. (Note that as ufw manages its own state, simply removing
# a rule=allow task can leave those ports exposed. Either use delete=yes
# or a separate state=reset task)
- name: Allow OpenSSH traffic
  ufw: rule=allow name=OpenSSH
  notify:
    - Restart ufw

- name: Allow mosh traffic
  ufw: rule=allow proto=udp port=60000:60010
  notify:
    - Restart ufw

# Set logging
- name: Enabled UFW logging
  ufw: logging=on

# Sometimes it is desirable to let the sender know when traffic is
# being denied, rather than simply ignoring it. In these cases, use
# reject instead of deny. In addition, log rejected connections:
- name: Enabled UFW reject logging
  ufw: rule=reject port=auth log=yes

- name: Configure ufw default policies
  ufw: direction={{ item.direction }} policy={{ item.policy }}
  with_items:
    - { direction: 'incoming', policy: 'deny' }
    - { direction: 'outgoing', policy: 'allow' }
  notify:
    - Restart ufw

- name: Disallow root SSH access
  lineinfile: dest=/etc/ssh/sshd_config
              regexp="^PermitRootLogin"
              line="PermitRootLogin no"
              state=present
  notify: Restart ssh

# Starting with 3 new connections pending authentication the server will 
# start to drop 50% of the new connections. The probability of random 
# drop increases linearly with the size of the backlog. By the time the 
# backlog increases to 10 pending unauthenticated connections, 100% 
# will be dropped.
#
- name: Modify login startup values
  lineinfile: dest=/etc/ssh/sshd_config
              regexp="^MaxStartups"
              line="MaxStartups 3:50:10"
              state=present
  notify: Restart ssh

# Allow connects with failed authentication attempts to only 30 seconds from the
# default of 2 minutes
#
- name: Modify login startup values
  lineinfile: dest=/etc/ssh/sshd_config
              regexp="^LoginGraceTime"
              line="LoginGraceTime 30"
              state=present
  notify: Restart ssh

- name: Set up Postfix to relay mail to enabled logging security reports
  debconf: name=postfix
           question='{{ item.question }}'
           value='{{ item.value }}'
           vtype='{{ item.vtype }}'
  with_items:
      - { question: 'postfix/mailname', value: '{{ ansible_fqdn }}', vtype: 'string' }
      - { question: 'postfix/main_mailer_type', value: 'Internet Site', vtype: 'string' }
  when: WSL.rc == 1

# Modify the empty relay host lines that is given as a default
#
- name: Modify postfix relayhost
  lineinfile: dest=/etc/postfix/main.cf
              regexp="^relayhost"
              line="relayhost = [smtp.gmail.com]:587"
              state=present
  notify: Restart postfix
  when: gmail_user is defined and gmail_app_password is defined and WSL.rc == 1

- name: Modify postfix smtp SASL based auth enabled
  lineinfile: dest=/etc/postfix/main.cf
              regexp="^smtp_sasl_auth_enable"
              line="smtp_sasl_auth_enable = yes"
              state=present
  notify: Restart postfix
  when: WSL.rc == 1

- name: Modify postfix smtp password map for Google application passwords
  lineinfile: dest=/etc/postfix/main.cf
              regexp="^smtp_sasl_password_maps"
              line="smtp_sasl_password_maps = hash:/etc/postfix/sasl/sasl_passwd"
              state=present
  notify: Restart postfix
  when: WSL.rc == 1

- name: Modify postfix smtp for non anonymous access
  lineinfile: dest=/etc/postfix/main.cf
              regexp="^smtp_sasl_security_options"
              line="smtp_sasl_security_options = noanonymous"
              state=present
  notify: Restart postfix
  when: WSL.rc == 1

- name: Modify postfix smtp certificate file
  lineinfile: dest=/etc/postfix/main.cf
              regexp="^smtp_tls_CAfile"
              line="smtp_tls_CAfile = /etc/postfix/cacert.pem"
              state=present
  notify: Restart postfix
  when: WSL.rc == 1

- name: Modify postfix smtp TLS enabled
  lineinfile: dest=/etc/postfix/main.cf
              regexp="^smtp_use_tls"
              line="smtp_use_tls = yes"
              state=present
  notify: Restart postfix
  when: WSL.rc == 1

- name: Copy thwate root CA file
  command: cp /etc/ssl/certs/thawte_Primary_Root_CA.pem /etc/postfix/cacert.pem
  when: WSL.rc == 1 and (ansible_distribution != "Ubuntu") and (ansible_distribution_major_version != "20")

- name: Create the postfix relay password file 
  file: path=/etc/postfix/sasl/sasl_password state=touch
  when: gmail_user is defined and gmail_app_password is defined and WSL.rc == 1

- name: Add google mail relay user and password settings
  lineinfile: dest=/etc/postfix/sasl/sasl_password
              regexp="^[smtp.gmail.com]"
              line="[smtp.gmail.com]:587 {{ gmail_user }}@gmail.com:{{ gmail_app_password }}"
              state=present
  notify: Restart postfix
  when: gmail_user is defined and gmail_app_password is defined and WSL.rc == 1

- name: Set the postfix relay password file permissions
  file: path=/etc/postfix/sasl/sasl_password mode=400
  when: gmail_user is defined and gmail_app_password is defined and WSL.rc == 1

- name: Add the security mapping to postfix
  command: postmap /etc/postfix/sasl/sasl_password
  notify: Restart postfix
  when: gmail_user is defined and gmail_app_password is defined and WSL.rc == 1

- name: Email log summary daily
  lineinfile: dest=/etc/cron.daily/00logwatch
              regexp="^/usr/sbin/logwatch"
              line="/usr/sbin/logwatch --output mail --mailto karlmutch@gmail.com --detail high"
              state=present create=yes
  when: gmail_user is defined and gmail_app_password is defined and WSL.rc == 1
