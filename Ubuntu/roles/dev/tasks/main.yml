---
- name: read vars
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        # "ansible_distribution" may be: "Debian", "SLES", "Ubuntu", "CentOS"
        # "ansible_distribution_version" may be: "9.0", "12.2", "16.04", "7.3.1611"
        # "ansible_distribution_major_version" may be: "9", "12", 16.04"
        # "ansible_os_family" may be: "Debian", "RedHat", "Suse"
        # Upper/lower case is important

        - "{{ ansible_distribution }}.{{ ansible_distribution_version }}.packagenames.yml"
        # results in: "SLES.12.2", "Ubuntu.16.04", "CentOS.7.3.1611", "Debian.8.7"

        - "{{ ansible_distribution }}.{{ ansible_distribution_major_version }}.packagenames.yml"
        # results in: "SLES.12", "Ubuntu.16", "CentOS.7", "Debian.9"

        - "{{ ansible_distribution }}.packagenames.yml"
        # results in: "Debian", "SLES", "Ubuntu", "CentOS"

        - "{{ ansible_os_family }}.packagenames.yml"
        # results in: "Debian", "Suse, "RedHat"

        - "default.packagenames.yml"
      paths: "./vars/"

- name: install OS Specific repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  when: package_repos is defined
  with_items: "{{ package_repos }}"


- name: install OS Specific packages
  package: name='{{ package_names }}' state=present
  when: package_names is defined

- name: Add Security repo and git toolsets ubuntu repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  with_items:
    - ppa:git-core/ppa
    - ppa:brightbox/ruby-ng

- name: Add JSon processing repos
  apt_repository: repo=ppa:duggan/jo update_cache=yes
  when: ansible_architecture == "x86_64"

- name: Install rump and unikernel dev tooling, was 4.4 now 4.6
  apt: name={{ item }} state=present
  with_items:
      - qemu
      - libxen-dev
      - libxen-4.6
  when: (ansible_distribution != "Ubuntu") and (ansible_distribution_major_version != "14")

- name: Create user bin directory
  file: path=/home/{{user}}/bin state=directory group={{user}} owner={{user}}

- name: Check if Go 1.11.9 is installed
  shell: go version
  register: go_version
  failed_when: false
  changed_when: false

- name: Download Go 1.11.9
  get_url:
      url: https://storage.googleapis.com/golang/go1.11.9.linux-amd64.tar.gz
      dest: /tmp/go1.11.9.linux-amd64.tar.gz
      force: true
  when: go_version.stdout.find('go version go1.11.9 linux/amd64') == -1

- name: Clean artifact path
  file:
    state: absent
    path: "/home/{{user}}/go"
  when: go_version.stdout.find('go version go1.11.9 linux/amd64') == -1

- name: Check for clean go directory
  stat: 
      path: "/home/{{user}}/go"
  register: goPath

- name: Install Go 1.11.9 locally for user {{user}}
  unarchive:
    src: /tmp/go1.11.9.linux-amd64.tar.gz
    dest: "/home/{{user}}"
    group: "{{user}}"
    owner: "{{user}}"
    copy: no
  when: not goPath.stat.exists

# - name: Install the micro editor, https://github.com/zyedidia/micro, with option --classic
#  snap:
#    name: micro
#    classic: yes
#
# - name: Install Go 11
#   snap:
#     name: go
#     classic: yes
#     channel: 1.11/stable

- sysctl:
    name: kernel.panic
    value: 3
    sysctl_file: /tmp/test_sysctl.conf
    reload: no

#- name: add the gorun command as a binary file handled for Linux
  #lineinfile: 
    #dest: /proc/sys/fs/binfmt_misc/register
    #line: ":golang:E::go::/usr/local/bin/gorun:OC"
    #regexp: "^:golang:E::go::/usr/local/bin/gorun:OC"
    #state: present
    #owner: root
    #group: root
    #mode: 0200

- name: Check if RipGrep 0.10.0 is installed
  shell: rg --version
  register: rg_version
  ignore_errors: yes
  failed_when: false
  changed_when: false

- name: Download RipGrep
  get_url: 
    url: https://github.com/BurntSushi/ripgrep/releases/download/11.0.0/ripgrep-11.0.0-x86_64-unknown-linux-musl.tar.gz
    dest: /tmp/ripgrep-11.0.0-x86_64-unknown-linux-musl.tar.gz
    force: true
  when: rg_version.stdout.find('ripgrep 11.0.0') == -1

- name: Unpack RipGrep
  unarchive:
    src: /tmp/ripgrep-11.0.0-x86_64-unknown-linux-musl.tar.gz
    dest: /tmp
    copy: no
    creates: "/tmp/ripgrep-0.10.0-x86_64-unknown-linux-musl/rg"
  when: rg_version.stdout.find('ripgrep 11.0.0') == -1

- name: Set Ripgrep ownership
  file: dest=/tmp/ripgrep-11.0.0-x86_64-unknown-linux-musl/rg mode=a+x group={{user}} owner={{user}}
  when: rg_version.stdout.find('ripgrep 11.0.0') == -1

- name: Install RipGrep to user {{user}} bin
  command: mv -f /tmp/ripgrep-11.0.0-x86_64-unknown-linux-musl/rg /home/{{user}}/bin/rg
  when: rg_version.stdout.find('ripgrep 11.0.0') == -1

- name: Check if direnv 2.20.0 is installed
  shell: direnv version
  register: direnv_version
  ignore_errors: yes
  failed_when: false
  changed_when: false

- name: Download direnv 2.20.0
  get_url:
    url: https://github.com/direnv/direnv/releases/download/v2.20.0/direnv.linux-amd64
    dest: /home/{{user}}/bin/direnv
    force: true
  when: direnv_version.stdout.find('2.20.0') == -1

- name: Enable direnv
  file: dest=/home/{{user}}/bin/direnv mode=a+x group={{user}} owner={{user}}
  when: direnv_version.stdout.find('2.20.0') == -1

- name: Check if grv 0.3.2 is installed
  shell: grv version
  register: grv_version
  ignore_errors: yes
  failed_when: false
  changed_when: false

- name: Download grv 0.3.2
  get_url:
    url: https://github.com/rgburke/grv/releases/download/v0.3.2/grv_v0.3.2_linux64
    dest: /home/{{user}}/bin/grv
    force: true
  when: grv_version.stdout.find('0.3.2') == -1

- name: Enable grv
  file: dest=/home/{{user}}/bin/grv mode=a+x group={{user}} owner={{user}}
  when: grv_version.stdout.find('0.3.2') == -1

- name: Install dev tooling
  apt: name={{ item }} update_cache=yes state=present
  with_items:
    - git-extras
    - autoconf 
    - automake 
    - libtool
    - libssl-dev
    - pkg-config
    - bison
    - g++
    - flex
    - default-jdk 
    - ant
    - mercurial
    - ncurses-dev
    - libpcre3-dev
    - libgpm-dev
    - libsqlite3-dev
    - libssl-dev
    - libcurl4-gnutls-dev
    - libexpat1-dev
    - exuberant-ctags
    - x11-xserver-utils
    - gettext
    - unzip
    - python-pygments
    - graphviz
    - pandoc
    - xclip
    - xsel
    - jq
    - grc

- name: Install dev tooling
  apt: name={{ item }} update_cache=yes state=present
  with_items:
    - jo
  when: ansible_architecture == "x86_64"

- name: Add 16.04+ git toolsets ubuntu repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  with_items:
    - ppa:lazygit-team/daily
  when: (ansible_distribution != "Ubuntu") and (ansible_distribution_major_version != "14")

- name: Install dev packages not supported on Ubuntu 14.04
  apt: name={{ item }} state=present
  with_items:
    - lazygit
    - libboost-dev
  when: (ansible_distribution != "Ubuntu") and (ansible_distribution_major_version != "14")

- name: Install thrift development tools for C++
  apt: name={{ item }} update_cache=yes state=present
  with_items:
    - automake
    - bison
    - flex
    - g++
    - git
    - libevent-dev
    - libssl-dev
    - libtool
    - make
    - pkg-config

- name: Install Ruby development tools
  apt: name={{ item }} update_cache=yes state=present
  with_items:
    - ruby2.5
    - ruby2.5-dev
  when: ansible_architecture == "x86_64"

- name: Install Travis Bundler
  command: bash -lc "gem install travis -v 1.8.6 --no-rdoc --no-ri"
  when: ansible_architecture == "x86_64"
