---
- name: Install general certs
  apt: name={{ item }} state=present
  with_items:
    - curl
    - ca-certificates
    - apt-transport-https

- name: Create a ca-certs directory
  become: true
  file: path=/usr/local/share/ca-certificates/cacert.org state=directory

- name: Download CA Certs root certificate
  become: true
  get_url: url=http://www.cacert.org/certs/root.crt dest=/usr/local/share/ca-certificates/cacert.org/root.crt

- name: Download CA Certs class 3 certificate
  become: true
  get_url: url=http://www.cacert.org/certs/class3.crt dest=/usr/local/share/ca-certificates/cacert.org/class3.crt

- name: Update certificates
  become: true
  shell: /usr/sbin/update-ca-certificates -f

- name: Load available groups
  shell: /usr/bin/getent group | awk -F":" '{print $1}'
  register: etc_groups

- name: Add the docker group
  group: name=docker gid=998 state=present
  when: '"docker" not in etc_groups.stdout_lines'

# Using apt-key within the ansible python code breaks on Ubuntu 14.04 due to openssl package dependencies breaking
- name: Add Docker GPG key
  command: bash -lc "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -"

- name: Add Docker APT repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable
  when: ansible_architecture == "x86_64"

- name: Install Docker CE and it dependencies
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - software-properties-common
    - docker-ce
  when: ansible_architecture == "x86_64"

#- name: Install the microk8s Kubernetes distribution
#  snap:
#    name: microk8s
#    classic: yes
#    channel: "1.12/stable"

- name: Start Docker
  service: name=docker state=restarted
  when: ansible_architecture == "x86_64"

- name: Check for a version of docui
  stat: 
      path: "/home/{{user}}/bin/docui"
  register: docuiPath

- name: Download docui
  get_url: 
    url: https://github.com/skanehira/docui/releases/download/1.0.3/Linux.zip
    dest: /tmp/docui.zip
    force: true
  when: not docuiPath.stat.exists

- name: Unpack docui
  unarchive:
    src: /tmp/docui.zip
    dest: /tmp
    copy: no
    creates: "/tmp/docui"
  when: not docuiPath.stat.exists

- name: Set docui ownership
  file: dest=/tmp/docui mode=a+x group={{user}} owner={{user}}
  when: not docuiPath.stat.exists

- name: Install docui to user {{user}} bin
  command: mv -f /tmp/docui /home/{{user}}/bin/docui
  when: not docuiPath.stat.exists

- name: Check if kubespy v0.4.0 is installed
  shell: kubespy version
  register: kubespy_version
  failed_when: false
  changed_when: false

- name: Download kubespy 0.4.0
  get_url:
      url: https://github.com/pulumi/kubespy/releases/download/v0.4.0/kubespy-linux-amd64.tar.gz
      dest: /tmp/kubespy.tar.gz
      force: true
  when: kubespy_version.stdout.find('v0.4.0') == -1

- name: Clean kubespy artifact path
  file:
    state: absent
    path: "/tmp/kubespy"
  when: kubespy_version.stdout.find('v0.4.0') == -1

- name: Create a kubespy unpack directory
  file:
      path: /tmp/kubespy
      state: directory
      mode: "u=rw,g=wx,o=rwx"
  when: kubespy_version.stdout.find('v0.4.0') == -1

- name: Extract kubespy v0.4.0
  unarchive:
    src: /tmp/kubespy.tar.gz
    dest: /tmp/kubespy
    group: "{{user}}"
    owner: "{{user}}"
    copy: no
  when: kubespy_version.stdout.find('v0.4.0') == -1

- name: Set kubespy ownership
  file: dest=/tmp/kubespy/releases/kubespy-linux-amd64/kubespy mode=a+x group={{user}} owner={{user}}
  when: kubespy_version.stdout.find('v0.4.0') == -1

- name: Install kubespy to user {{user}} bin
  command: mv -f /tmp/kubespy/releases/kubespy-linux-amd64/kubespy /home/{{user}}/bin/kubespy
  when: kubespy_version.stdout.find('v0.4.0') == -1

- name: Clean kubespy artifact path
  file:
    state: absent
    path: "/tmp/kubespy"
  when: kubespy_version.stdout.find('v0.4.0') == -1
