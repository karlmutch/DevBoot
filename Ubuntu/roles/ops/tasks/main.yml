---
- name: Test OS for WSL2
  shell: grep -qE "(Microsoft|WSL|microsoft-standard-WSL2)" /proc/version
  register: WSL
  ignore_errors: True
  no_log: True
  args:
      warn: False

# An rc of 0 means the text was found
- name: Test OS for OrbStack
  shell: grep -qE "(orbstack)" /proc/version
  register: OrbStackTest
  ignore_errors: True
  no_log: True
  args:
      warn: False

- name: Evaluate of this is an OrbStack system that does not need certain tools
  set_fact:
    orbstack: "{{ true if (not OrbStackTest.failed and OrbStackTest.rc == 0) }}"

- name: Evaluate of this is likely to be a pure Linux system that will use its own docker
  set_fact:
    bare_metal_linux: "{{ true if not ( WSL.failed or WSL.rc == 1 ) and not (OrbStackTest.failed or OrbStackTest.rc == 1) }}"

- name: Get users homedir
  local_action: command echo ~{{ user }}
  register: home_output

- set_fact:
    homedir: "{{ home_output.stdout }}"

- name: Debug user details
  ansible.builtin.debug:
    msg: "{{ homedir }} and user {{ user }}"

- name: Creates users .local directory
  file:
    dest: "{{homedir}}/.local/bin"
    state: directory
    recurse: yes
    owner: "{{user}}"
    group: "{{user}}"

- name: read vars
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        # "ansible_distribution" may be: "Debian", "SLES", "Ubuntu", "CentOS"
        # "ansible_distribution_version" may be: "9.0", "12.2", "14.04", "16.04", "18.04", "7.3.1611"
        # "ansible_distribution_major_version" may be: "9", "12", "16.04"
        # "ansible_os_family" may be: "Debian", "RedHat", "Suse"
        # Upper/lower case is important

        - "{{ ansible_distribution }}.{{ ansible_distribution_version }}.packagenames.yml"
        # examples might include: "SLES.12.2", "Ubuntu.16.04", "CentOS.7.3.1611", "Debian.8.7"

        - "{{ ansible_distribution }}.{{ ansible_distribution_major_version }}.packagenames.yml"
        # examples might include: "SLES.12", "Ubuntu.14", "Ubuntu.16", "Ubuntu.18", "CentOS.7", "Debian.9"

        - "{{ ansible_distribution }}.packagenames.yml"
        # examples might include: "Debian", "SLES", "Ubuntu", "CentOS"

        - "{{ ansible_os_family }}.packagenames.yml"
        # examples might inclu "Debian", "Suse, "RedHat"

        - "default.packagenames.yml"
      paths: "./vars/"

- name: Obtain OS exec name
  shell: uname | tr '[:upper:]' '[:lower:]'
  register: shell_uname_exec_result

- name: Obtain OS default name
  shell: uname -s
  register: shell_uname_result

- name: Add an Apt signing key for kubectl, a kubernetes tool.
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add an Apt signing key for the new Kubernetes repos
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
    state: present

- name: install OS Specific repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  when: package_repos is defined
  with_items: "{{ package_repos }}"


- name: install OS Specific packages
  package: name='{{ package_names }}' state=present
  when: package_names is defined

- name: Add git repo
  apt_repository: repo='{{ item }}' update_cache=yes
  with_items:
    - ppa:git-core/ppa
  when: ansible_architecture == "x86_64" and (ansible_distribution == "Ubuntu") and ( ansible_distribution_major_version | int < 23)

- name: install bcc keys
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: 4052245BD4284CDD

- name: Add development tool sets ubuntu repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  with_items:
    - ppa:neovim-ppa/unstable
  when: ansible_architecture == "x86_64"

- name: Add development tool sets for older ubuntu repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  with_items:
    - ppa:pi-rho/dev
  when: ansible_architecture == "x86_64" and (ansible_distribution == "Ubuntu") and ( ansible_distribution_major_version | int < 23)

- name: Tailscale signing key
  become: yes
  apt_key:
    url: "https://pkgs.tailscale.com/stable/{{ ansible_distribution | lower }}/{{ ansible_distribution_release | lower }}.gpg"
    state: present

- name: Add Tailscale deb
  become: yes
  apt_repository:
    repo: "deb https://pkgs.tailscale.com/stable/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }} main"
    state: present

- name: Install core tooling for admin and access for non OrbStack
  apt: 
    pkg:
      - rxvt-unicode-256color
    state: latest
    update_cache: true
  when: ansible_architecture == "x86_64" and (ansible_distribution == "Ubuntu") and ( ansible_distribution_major_version | int < 23)

- ansible.builtin.apt:
    clean: yes
  become: yes

- name: Install core tooling for admin and access
  apt: 
    pkg:
      - gnupg2
      - gnupg-agent
      - apt-transport-https
      - python3-apt
      - xauth
      - rsync
      - most
      - tree
      - unzip
      - mosh
      - wget
      - curl
      - terminator
      - vim
      - python3-dev
      - python3-pip
      - tmux
      - multitail
      - apache2-utils
      - htop
      - glances
      - nmon
      - git
      - git-flow
      - dfc
      - parallel
      - screenfetch
      - sysdig
      - libnotify4
      - xdg-utils
      - kubectl
      - tailscale
    state: latest
    update_cache: true

- name: Install core tooling for eBPF
  apt:
    pkg:
      - bcc-tools
    state: latest
  when: ansible_architecture == "x86_64" and (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "18")

- name: Install core tooling for eBPF
  apt:
    pkg:
      - bpfcc-tools
    state: latest
  when: ansible_architecture == "x86_64" and (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "18")

- name: Install core tooling for admin and access
  apt:
    pkg:
      - neovim
    state: latest
  when: ansible_architecture == "x86_64"


- name: Install core tooling for admin and access, Ubuntu 14.04 specific
  apt:
    pkg:
      - python-pip
      - cloud-image-utils
    state: latest
    install_recommends: yes
  when: (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "14")

- name: Install core tooling for admin and access, Ubuntu 16.01+
  apt:
    pkg:
      - python-pip
      - cloud-image-utils
      - highlight
      - lolcat
      - ranger
    state: latest
  when: (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "16")

- name: Install Ubuntu docker distribution
  snap:
    name: procs
    classic: yes
  when: ansible_architecture == "x86_64" and ansible_distribution == "Ubuntu" and bare_metal_linux

- name: Check if lnav 0.11.2 is installed
  shell: lnav -V
  register: lnav_version
  failed_when: false
  changed_when: false

- name: Download lnav at version 0.11.2
  get_url:
    url: "https://github.com/tstack/lnav/releases/download/v0.11.2/lnav-0.11.2-{{ ansible_architecture }}-linux-musl.zip"
    dest: "/tmp/lnav-linux-64bit.zip"
  when: ("lnav 0.11.2" not in lnav_version.stdout) and ansible_architecture == "x86_64"

- name: Extract lnav archive at version 0.10.1
  unarchive: 
    src: /tmp/lnav-linux-64bit.zip
    dest: /tmp 
    copy: no
  when: ("lnav 0.11.2" not in lnav_version.stdout) and ansible_architecture == "x86_64"

- name: Copy extracted lnav 0.11.2 executable to /usr/local/bin
  command: mv -f /tmp/lnav-0.11.2/lnav /usr/local/bin/lnav
  when: ("lnav 0.11.2" not in lnav_version.stdout) and ansible_architecture == "x86_64"

- name: Check if eza 0.16.3 is installed
  shell: eza --version
  register: eza_version
  failed_when: false
  changed_when: false

- name: Download Rust based eza 0.16.3
  get_url:
    url: "https://github.com/eza-community/eza/releases/download/v0.16.3/eza_{{ ansible_architecture }}-unknown-linux-musl.zip"
    dest: "/tmp/eza.zip"
    force: yes
  when: ("0.16.3" not in eza_version.stdout) and ansible_architecture == "x86_64"

- name: Create Rust based eza installation directory
  file:
    path: /tmp/eza-linux-{{ ansible_architecture }}
    state: directory
  when: ("0.16.3" not in eza_version.stdout) and ansible_architecture == "x86_64"

- name: Extract eza version 0.16.3
  unarchive: src=/tmp/eza.zip dest=/tmp/eza-linux-x86_64 copy=no creates=/tmp/eza-linux-{{ ansible_architecture }}/eza
  when: ("0.16.3" not in eza_version.stdout) and ansible_architecture == "x86_64"

- name: Copy extracted eza executable to /usr/local/bin
  command: mv /tmp/eza-linux-{{ ansible_architecture }}/eza /usr/local/bin/eza
  when: ("0.16.3" not in eza_version.stdout) and ansible_architecture == "x86_64"

- name: Make Rust based eza executable
  file: path=/usr/local/bin/eza mode="u+x,g+x,o+x"
  when: ("0.16.3" not in eza_version.stdout) and ansible_architecture == "x86_64"

- name: Remove Rust based eza installation directory
  file:
    path: /tmp/eza-linux-{{ ansible_architecture }}
    state: absent
  when: ("0.16.3" not in eza_version.stdout) and ansible_architecture == "x86_64"

- name: Check if fd 8.7.1 is installed
  shell: fd --version
  register: fd_version
  failed_when: false
  changed_when: false

- name: Download Rust based fd 8.7.1
  get_url:
    url: "https://github.com/sharkdp/fd/releases/download/v8.7.1/fd-v8.7.1-{{ ansible_architecture }}-unknown-linux-musl.tar.gz"
    dest: "/tmp/fd.tar.gz"
    force: yes
  when: ("fd 8.7.1" not in fd_version.stdout) and ansible_architecture == "x86_64"

- name: Extract fd version 8.7.1
  unarchive: src=/tmp/fd.tar.gz dest=/tmp copy=no creates=/tmp/fd-v8.7.1-{{ ansible_architecture }}-unknown-linux-musl
  when: ("fd 8.7.1" not in fd_version.stdout) and ansible_architecture == "x86_64"

- name: Copy extracted fd executable to /usr/local/bin
  command: mv /tmp/fd-v8.7.1-{{ ansible_architecture }}-unknown-linux-musl/fd /usr/local/bin/fd
  when: ("fd 8.7.1" not in fd_version.stdout) and ansible_architecture == "x86_64"

- name: Make Rust based fd executable
  file: path=/usr/local/bin/fd mode="u+x,g+x,o+x"
  when: ("fd 8.7.1" not in fd_version.stdout) and ansible_architecture == "x86_64"

- name: Check if sift 0.9.0 is installed
  shell: sift --version
  register: sift_version
  failed_when: false
  changed_when: false

- name: Download sift 0.9.0
  get_url: 
    url: "https://sift-tool.org/downloads/sift/sift_0.9.0_linux_amd64.tar.gz"
    dest: "/tmp/sift.tar.gz"
    force: true
  when: ("sift 0.9.0" not in sift_version.stdout) and ansible_architecture == "x86_64"

- name: Extract sift version 0.9.0
  unarchive: 
    src: /tmp/sift.tar.gz
    dest: /tmp
    copy: no
  when: ("sift 0.9.0" not in sift_version.stdout) and ansible_architecture == "x86_64"

- name: Copy extracted sift executable to /usr/local/bin
  command: mv -f /tmp/sift_0.9.0_linux_amd64/sift /usr/local/bin/sift
  when: ("sift 0.9.0" not in sift_version.stdout) and ansible_architecture == "x86_64"

#- name: Check if atom is installed
#  command: dpkg-query -W atom
#  register: atom_check_debs
#  failed_when: atom_check_deb.rc > 1
#  changed_when: atom_check_deb.rc == 1

#- name: Download Atom
#  get_url: 
#    url="https://github.com/atom/atom/releases/download/v1.8.0/atom-amd64.deb"
#    dest="/tmp/atom-amd64.deb"
#  when: atom_check_deb.rc == 1

#- name: Install Atom
#  apt: deb="/tmp/atom-amd64.deb"
#  become: true
#  when: atom_check_deb.rc == 1

- name: Check if awscli 2.4.7 is installed
  shell: aws --version
  register: aws_version
  failed_when: false
  changed_when: false

- name: Download awscli 2.4.7
  get_url: 
    url: "https://awscli.amazonaws.com/awscli-exe-linux-{{ ansible_architecture }}.zip"

    dest: /tmp/awscli.zip
    owner: root
    group: root
    mode: 0666
    force: yes
  when: ("2.4.7 " not in aws_version.stdout) and ansible_architecture == "x86_64"

- name: Extract awscli version 2.4.7
  unarchive: src=/tmp/awscli.zip dest=/tmp copy=no creates=/tmp/aws
  when: ("2.4.7" not in aws_version.stdout) and ansible_architecture == "x86_64"

- name: Install awscli 2.4.7
  shell: /tmp/aws/install --update
  register: aws_shell_result
  when: ("2.4.7" not in aws_version.stdout) and ansible_architecture == "x86_64"

- name: Remove the temporary awscli directory
  file:
    path: "/tmp/aws"
    state: absent
  when: ("2.4.7" not in aws_version.stdout) and ansible_architecture == "x86_64"

- name: Check if eksctl 0.77.0 is installed
  shell: eksctl version
  register: eksctl_version
  failed_when: false
  changed_when: false

- name: Download eksctl 0.77.0
  get_url:
    url: "https://github.com/weaveworks/eksctl/releases/download/v0.77.0/eksctl_{{ shell_uname_result.stdout }}_amd64.tar.gz"
    dest: /tmp/eksctl.tar.gz
    owner: root
    group: root
    mode: 0666
    force: yes
  when: ("0.77.0" not in eksctl_version.stdout) and ansible_architecture == "x86_64"

- name: Extract eksctl version 0.77.0
  unarchive: src=/tmp/eksctl.tar.gz dest=/tmp copy=no creates=/tmp/eksctl
  when: ("0.77.0" not in eksctl_version.stdout) and ansible_architecture == "x86_64"

- name: Copy extracted eksctl executable to /usr/local/bin
  command: mv /tmp/eksctl /usr/local/bin/eksctl
  when: ("0.77.0" not in eksctl_version.stdout) and ansible_architecture == "x86_64"

- name: Check if kops 1.22.2 is installed
  shell: kops version
  register: kops_version
  failed_when: false
  changed_when: false

- name: Download kops 1.22.2
  get_url: 
    url: "https://github.com/kubernetes/kops/releases/download/v1.22.2/kops-{{ shell_uname_result.stdout }}-amd64"

    dest: /usr/local/bin/kops
    owner: root
    group: root
    mode: 0755
    force: yes
  when: ("Version 1.22.2 " not in kops_version.stdout) and ansible_architecture == "x86_64"

- name: Check if kustomize 5.3.0 installed
  shell: kustomize version
  register: kustomize_version
  failed_when: false
  changed_when: false

- name: Download kustomize 5.3.0
  get_url: 
    url: "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.3.0/kustomize_v5.3.0_{{ shell_uname_result.stdout }}_amd64.tar.gz"
    dest: /tmp/kustomize.tar.gz
    force: yes
  when: ("5.3.0 " not in kustomize_version.stdout) and ansible_architecture == "x86_64"

- name: Extract kustomize version 5.3.0
  unarchive: src=/tmp/kustomize.tar.gz dest=/tmp copy=no creates=/tmp/kustomize
  when: ("5.3.0 " not in kustomize_version.stdout) and ansible_architecture == "x86_64"

- name: Copy extracted kustomize executable to /usr/local/bin
  command: mv /tmp/kustomize /usr/local/bin/kustomize
  when: ("5.3.0 " not in kustomize_version.stdout) and ansible_architecture == "x86_64"

- name: Make kustomize executable
  file: path=/usr/local/bin/kustomize mode="u+x,g+x,o+x"
  when: ("5.3.0 " not in kustomize_version.stdout) and ansible_architecture == "x86_64"

- name: Check if krew is installed
  shell: kubectl krew version
  environment:
      PATH: '{{ ansible_env.PATH }}:{{ homedir }}/.krew/bin'
  register: krew_version
  failed_when: false
  changed_when: false


- name: Evaluate of this is likely to be a pure Linux system that will use its own docker
  set_fact:
    missing_krew: "{{ true if ( krew_version.failed or krew_version.rc == 1 or 'unknown command' in krew_version.stderr) }}"

- name: create temporary krew install directory
  tempfile:
    state: directory
    suffix: _krew_installer
  register: krew_temp
  when: (missing_krew or ("v0.4.2" not in krew_version.stdout)) and ansible_architecture == "x86_64"


- name: Download krew 0.4.2
  shell:
    cmd: curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew{-{{ shell_uname_result.stdout }}_amd64.tar.gz,.yaml}"
    chdir: "{{ krew_temp.path }}"
  when: (missing_krew or ("v0.4.2" not in krew_version.stdout)) and ansible_architecture == "x86_64"

- name: Extract krew installer
  unarchive: 
    src={{ krew_temp.path }}/krew-{{ shell_uname_result.stdout }}_amd64.tar.gz
    dest={{ krew_temp.path }}
    copy=no
  when: (missing_krew or ("v0.4.2" not in krew_version.stdout)) and ansible_architecture == "x86_64"

- name: Modify temp directory permissions to allow user installation of krew
  ansible.builtin.file:
    path: "{{ krew_temp.path }}"
    state: directory
    mode: '0755'

- name: Install krew 0.4.2 from tar archive
  shell:
    cmd: ./krew-{{ shell_uname_exec_result.stdout }}_amd64 install krew
    chdir: "{{ krew_temp.path }}"
  when: (missing_krew or ("v0.4.2" not in krew_version.stdout)) and ansible_architecture == "x86_64"

- name: Update krew index using installer
  shell:
    cmd: ./krew-{{ shell_uname_exec_result.stdout }}_amd64 update
    chdir: "{{ krew_temp.path }}"
  when: (missing_krew or ("v0.4.2" not in krew_version.stdout)) and ansible_architecture == "x86_64"

#- name: Remove the temporary krew directory
#  file:
#    path: "{{ krew_temp.path }}"
#    state: absent
#  when: (missing_krew or ("v0.4.2" not in krew_version.stdout)) and ansible_architecture == "x86_64"

- name: Check krew version installed
  command: kubectl krew version
  environment:
      PATH: '{{ ansible_env.PATH }}:{{ homedir }}/.krew/bin'
  register: krew_version
  failed_when: false
  changed_when: false

- name: Upgrade krew plugin
  shell: kubectl krew upgrade
  environment:
      PATH: '{{ ansible_env.PATH }}:{{ homedir }}/.krew/bin'
  register: upgrade_krew
  ignore_errors: yes
  when: (("unknown command" in krew_version.stderr) or ("v0.4.2" not in krew_version.stdout)) and ansible_architecture == "x86_64"

- fail: msg="{{ upgrade_krew }}"
  when: ('the newest version is already installed' not in upgrade_krew) and ('it is already on the newest version' not in upgrade_krew.stderr) and ("v0.4.2" not in krew_version.stdout) and ansible_architecture == "x86_64"

- name: Update krew index
  command: kubectl krew update
  environment:
      PATH: '{{ ansible_env.PATH }}:{{ homedir }}/.krew/bin'
  ignore_errors: True
  when: ansible_architecture == "x86_64"
