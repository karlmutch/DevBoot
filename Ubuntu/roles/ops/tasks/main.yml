---

- name: read vars
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        # "ansible_distribution" may be: "Debian", "SLES", "Ubuntu", "CentOS"
        # "ansible_distribution_version" may be: "9.0", "12.2", "14.04", "16.04", "18.04", "7.3.1611"
        # "ansible_distribution_major_version" may be: "9", "12", "16.04"
        # "ansible_os_family" may be: "Debian", "RedHat", "Suse"
        # Upper/lower case is important

        - "{{ ansible_distribution }}.{{ ansible_distribution_version }}.packagenames.yml"
        # examples might include: "SLES.12.2", "Ubuntu.16.04", "CentOS.7.3.1611", "Debian.8.7"

        - "{{ ansible_distribution }}.{{ ansible_distribution_major_version }}.packagenames.yml"
        # examples might include: "SLES.12", "Ubuntu.14", "Ubuntu.16", "Ubuntu.18", "CentOS.7", "Debian.9"

        - "{{ ansible_distribution }}.packagenames.yml"
        # examples might include: "Debian", "SLES", "Ubuntu", "CentOS"

        - "{{ ansible_os_family }}.packagenames.yml"
        # examples might includ: "Debian", "Suse, "RedHat"

        - "default.packagenames.yml"
      paths: "./vars/"

- name: install OS Specific repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  when: package_repos is defined
  with_items: "{{ package_repos }}"

- name: Add an Apt signing key for kubectl, a kubernetes tool.
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present


- name: install OS Specific packages
  package: name='{{ package_names }}' state=present
  when: package_names is defined

- name: Add git repo
  apt_repository: repo='{{ item }}' update_cache=yes
  with_items:
    - ppa:git-core/ppa

- name: Add development tool sets ubuntu repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  with_items:
    - ppa:pi-rho/dev
    - ppa:neovim-ppa/unstable
    - deb [trusted=yes] https://repo.iovisor.org/apt/{{ansible_distribution_release}} {{ansible_distribution_release}}-nightly main
    - deb http://apt.kubernetes.io/ kubernetes-{{ansible_distribution_release}} main
  when: ansible_architecture == "x86_64"

- name: Install core tooling for admin and access
  apt: name={{ item }} state=present
  with_items:
    - xauth
    - rsync
    - most
    - tree
    - unzip
    - mosh
    - wget
    - curl
    - rxvt-unicode-256color
    - terminator
    - vim
    - python-dev
    - python3-dev
    - python3-pip
    - tmux
    - multitail
    - apache2-utils
    - htop
    - glances
    - nmon
    - git
    - git-flow
    - dfc
    - parallel
    - screenfetch
    - sysdig
    - libnotify4
    - gvfs-bin
    - xdg-utils
    - kubectl

- name: Install core tooling for admin and access
  apt: name={{ item }} state=present
  with_items:
    - bcc-tools
    - neovim
  when: ansible_architecture == "x86_64"


- name: Install core tooling for admin and access, Ubuntu 14.04 specific
  apt: name={{ item }} state=present install_recommends=yes
  with_items:
    - python-pip
    - cloud-image-utils
  when: (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "14")

- name: Install core tooling for admin and access, Ubuntu 16.01+
  apt: name={{ item }} state=present
  with_items:
    - python-pip
    - cloud-image-utils
    - highlight
    - lolcat
    - ranger
  when: (ansible_distribution != "Ubuntu") or (ansible_distribution_major_version != "14")

- name: Check if lnav 0.8.4 is installed
  shell: lnav -h
  register: lnav_version
  failed_when: false
  changed_when: false

- name: Download lnav at version 0.8.4
  get_url:
    url: "https://github.com/tstack/lnav/releases/download/v0.8.4/lnav-0.8.4-linux-64bit.zip"
    dest: "/tmp/lnav-0.8.4-linux-64bit.zip"
  when: lnav_version.stdout.find("lnav 0.8.4") == -1 or lnav_version.rc != 0 and ansible_architecture == "x86_64"

- name: Extract lnav archive at version 0.8.4
  unarchive: 
    src: /tmp/lnav-0.8.4-linux-64bit.zip
    dest: /tmp 
    copy: no
  when: lnav_version.stdout.find("lnav 0.8.4") == -1 or lnav_version.rc != 0 and ansible_architecture == "x86_64"

- name: Copy extracted lnav 0.8.4 executable to /usr/local/bin
  command: mv -f /tmp/lnav-0.8.4/lnav /usr/local/bin/lnav
  when: lnav_version.stdout.find("lnav 0.8.4") == -1 or lnav_version.rc != 0 and ansible_architecture == "x86_64"

- name: Check if exa 0.8.0 is installed
  shell: exa --version
  register: exa_version
  failed_when: false
  changed_when: false

- name: Download Rust based exa 0.8.0
  get_url:
    url: "https://github.com/ogham/exa/releases/download/v0.8.0/exa-linux-x86_64-0.8.0.zip"
    dest: "/tmp/exa.zip"
    force: yes
  when: exa_version.stdout.find('exa 0.8.0') == -1 or exa_version.rc != 0 and ansible_architecture == "x86_64"

- name: Extract exa version 0.8.0
  unarchive: src=/tmp/exa.zip dest=/tmp copy=no creates=/tmp/exa-linux-x86_64
  when: exa_version.stdout.find('exa 0.8.0') == -1 or exa_version.rc != 0 and ansible_architecture == "x86_64"

- name: Copy extracted exa executable to /usr/local/bin
  command: mv /tmp/exa-linux-x86_64 /usr/local/bin/exa
  when: exa_version.stdout.find('exa 0.8.0') == -1 or exa_version.rc != 0 and ansible_architecture == "x86_64"

- name: Make Rust based exa executable
  file: path=/usr/local/bin/exa mode="u+x,g+x,o+x"
  when: exa_version.stdout.find('exa 0.8.0') == -1 or exa_version.rc != 0 and ansible_architecture == "x86_64"

- name: Check if sift 0.9.0 is installed
  shell: sift --version
  register: sift_version
  failed_when: false
  changed_when: false

- name: Download sift 0.9.0
  get_url: 
    url: "https://sift-tool.org/downloads/sift/sift_0.9.0_linux_amd64.tar.gz"
    dest: "/tmp/sift.tar.gz"
    force: true
  when: sift_version.stdout.find('sift 0.9.0') == -1 or sift_version.rc != 0 and ansible_architecture == "x86_64"

- name: Extract sift version 0.9.0
  unarchive: 
    src: /tmp/sift.tar.gz
    dest: /tmp
    copy: no
  when: sift_version.stdout.find('sift 0.9.0') == -1 or sift_version.rc != 0 and ansible_architecture == "x86_64"

- name: Copy extracted sift executable to /usr/local/bin
  command: mv -f /tmp/sift_0.9.0_linux_amd64/sift /usr/local/bin/sift
  when: sift_version.stdout.find('sift 0.9.0') == -1 or sift_version.rc != 0 and ansible_architecture == "x86_64"

#- name: Check if atom is installed
#  command: dpkg-query -W atom
#  register: atom_check_deb
#  failed_when: atom_check_deb.rc > 1
#  changed_when: atom_check_deb.rc == 1

#- name: Download Atom
#  get_url: 
#    url="https://github.com/atom/atom/releases/download/v1.8.0/atom-amd64.deb"
#    dest="/tmp/atom-amd64.deb"
#  when: atom_check_deb.rc == 1

#- name: Install Atom
#  apt: deb="/tmp/atom-amd64.deb"
#  become: true
#  when: atom_check_deb.rc == 1

