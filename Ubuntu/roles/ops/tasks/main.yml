---
- name: read vars
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        # "ansible_distribution" may be: "Debian", "SLES", "Ubuntu", "CentOS"
        # "ansible_distribution_version" may be: "9.0", "12.2", "14.04", "16.04", "18.04", "7.3.1611"
        # "ansible_distribution_major_version" may be: "9", "12", "16.04"
        # "ansible_os_family" may be: "Debian", "RedHat", "Suse"
        # Upper/lower case is important

        - "{{ ansible_distribution }}.{{ ansible_distribution_version }}.packagenames.yml"
        # examples might include: "SLES.12.2", "Ubuntu.16.04", "CentOS.7.3.1611", "Debian.8.7"

        - "{{ ansible_distribution }}.{{ ansible_distribution_major_version }}.packagenames.yml"
        # examples might include: "SLES.12", "Ubuntu.14", "Ubuntu.16", "Ubuntu.18", "CentOS.7", "Debian.9"

        - "{{ ansible_distribution }}.packagenames.yml"
        # examples might include: "Debian", "SLES", "Ubuntu", "CentOS"

        - "{{ ansible_os_family }}.packagenames.yml"
        # examples might includ: "Debian", "Suse, "RedHat"

        - "default.packagenames.yml"
      paths: "./vars/"

- name: install OS Specific repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  when: package_repos is defined
  with_items: "{{ package_repos }}"

- name: Add an Apt signing key for kubectl, a kubernetes tool.
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present


- name: install OS Specific packages
  package: name='{{ package_names }}' state=present
  when: package_names is defined

- name: Add git repo
  apt_repository: repo='{{ item }}' update_cache=yes
  with_items:
    - ppa:git-core/ppa

- name: Add development tool sets ubuntu repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  with_items:
    - ppa:pi-rho/dev
    - ppa:neovim-ppa/unstable
  when: ansible_architecture == "x86_64"

- name: Add development tool sets ubuntu repositories
  apt_repository: repo='{{ item }}' update_cache=yes
  with_items:
    - ppa:pi-rho/dev
    - ppa:neovim-ppa/unstable
  when: ansible_architecture == "x86_64"

- name: Tailscale signing key
  become: yes
  apt_key:
    url: "https://pkgs.tailscale.com/stable/{{ ansible_distribution | lower }}/{{ ansible_distribution_release | lower }}.gpg"
    state: present

- name: Add Tailscale deb
  become: yes
  apt_repository:
    repo: "deb https://pkgs.tailscale.com/stable/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }} main"
    state: present

- name: Install core tooling for admin and access
  apt: 
    name: "{{ items }}"
    state: present
    update_cache: true
  vars:
    items:
    - gnupg2
    - gnupg-agent
    - apt-transport-https
    - python-apt
    - python3-apt
    - xauth
    - rsync
    - most
    - tree
    - unzip
    - mosh
    - wget
    - curl
    - rxvt-unicode-256color
    - terminator
    - vim
    - python-dev
    - python3-dev
    - python3-pip
    - tmux
    - multitail
    - apache2-utils
    - htop
    - glances
    - nmon
    - git
    - git-flow
    - dfc
    - parallel
    - screenfetch
    - sysdig
    - libnotify4
    - gvfs-bin
    - xdg-utils
    - kubectl
    - tailscale

- name: Install core tooling for admin and access
  apt:
      name: "{{ items }}"
      state: present
  vars:
    items:
    - bcc-tools
    - neovim
  when: ansible_architecture == "x86_64"


- name: Install core tooling for admin and access, Ubuntu 14.04 specific
  apt:
    name: "{{ items }}"
    state: present
    install_recommends: yes
  vars:
    items:
    - python-pip
    - cloud-image-utils
  when: (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "14")

- name: Install core tooling for admin and access, Ubuntu 16.01+
  apt:
    name: "{{ items }}"
    state: present
  vars:
    items:
    - python-pip
    - cloud-image-utils
    - highlight
    - lolcat
    - ranger
  when: (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "16")

- name: Check if lnav 0.8.5 is installed
  shell: lnav -V
  register: lnav_version
  failed_when: false
  changed_when: false

- name: Download lnav at version 0.8.5
  get_url:
    url: "https://github.com/tstack/lnav/releases/download/v0.8.5/lnav-0.8.5-linux-64bit.zip"
    dest: "/tmp/lnav-0.8.5-linux-64bit.zip"
  when: ("lnav 0.8.5" not in lnav_version.stdout) and ansible_architecture == "x86_64"

- name: Extract lnav archive at version 0.8.5
  unarchive: 
    src: /tmp/lnav-0.8.5-linux-64bit.zip
    dest: /tmp 
    copy: no
  when: ("lnav 0.8.5" not in lnav_version.stdout) and ansible_architecture == "x86_64"

- name: Copy extracted lnav 0.8.5 executable to /usr/local/bin
  command: mv -f /tmp/lnav-0.8.5/lnav /usr/local/bin/lnav
  when: ("lnav 0.8.5" not in lnav_version.stdout) and ansible_architecture == "x86_64"

- name: Check if exa 0.9.0 is installed
  shell: exa --version
  register: exa_version
  failed_when: false
  changed_when: false

- name: Download Rust based exa 0.9.0
  get_url:
    url: "https://github.com/ogham/exa/releases/download/v0.9.0/exa-linux-x86_64-0.9.0.zip"
    dest: "/tmp/exa.zip"
    force: yes
  when: ("0.9.0" not in exa_version.stdout) and ansible_architecture == "x86_64"

- name: Extract exa version 0.9.0
  unarchive: src=/tmp/exa.zip dest=/tmp copy=no creates=/tmp/exa-linux-x86_64
  when: ("0.9.0" not in exa_version.stdout) and ansible_architecture == "x86_64"

- name: Copy extracted exa executable to /usr/local/bin
  command: mv /tmp/exa-linux-x86_64 /usr/local/bin/exa
  when: ("0.9.0" not in exa_version.stdout) and ansible_architecture == "x86_64"

- name: Make Rust based exa executable
  file: path=/usr/local/bin/exa mode="u+x,g+x,o+x"
  when: ("0.9.0" not in exa_version.stdout) and ansible_architecture == "x86_64"

- name: Check if sift 0.9.0 is installed
  shell: sift --version
  register: sift_version
  failed_when: false
  changed_when: false

- name: Download sift 0.9.0
  get_url: 
    url: "https://sift-tool.org/downloads/sift/sift_0.9.0_linux_amd64.tar.gz"
    dest: "/tmp/sift.tar.gz"
    force: true
  when: ("sift 0.9.0" not in sift_version.stdout) and ansible_architecture == "x86_64"

- name: Extract sift version 0.9.0
  unarchive: 
    src: /tmp/sift.tar.gz
    dest: /tmp
    copy: no
  when: ("sift 0.9.0" not in sift_version.stdout) and ansible_architecture == "x86_64"

- name: Copy extracted sift executable to /usr/local/bin
  command: mv -f /tmp/sift_0.9.0_linux_amd64/sift /usr/local/bin/sift
  when: ("sift 0.9.0" not in sift_version.stdout) and ansible_architecture == "x86_64"

#- name: Check if atom is installed
#  command: dpkg-query -W atom
#  register: atom_check_deb
#  failed_when: atom_check_deb.rc > 1
#  changed_when: atom_check_deb.rc == 1

#- name: Download Atom
#  get_url: 
#    url="https://github.com/atom/atom/releases/download/v1.8.0/atom-amd64.deb"
#    dest="/tmp/atom-amd64.deb"
#  when: atom_check_deb.rc == 1

#- name: Install Atom
#  apt: deb="/tmp/atom-amd64.deb"
#  become: true
#  when: atom_check_deb.rc == 1

- name: Check if kops 1.16.0 is installed
  shell: kops version
  register: kops_version
  failed_when: false
  changed_when: false

- name: Download kops 1.16.0
  get_url: 
    url: "https://github.com/kubernetes/kops/releases/download/v1.16.0/kops-linux-amd64"

    dest: /usr/local/bin/kops
    owner: root
    group: root
    mode: 0755
    force: yes
  when: ("Version 1.16.0 " not in kops_version.stdout) and ansible_architecture == "x86_64"

- name: Check if kustomize 3.5.4 is installed
  shell: kustomize version
  register: kustomize_version
  failed_when: false
  changed_when: false

- name: Download kustomize 3.5.4
  get_url: 
    url: "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.5.4/kustomize_v3.5.4_linux_amd64.tar.gz"
    dest: /tmp/kustomize.tar.gz
    force: yes
  when: ("Version 3.5.4 " not in kustomize_version.stdout) and ansible_architecture == "x86_64"

- name: Extract kustomize version 3.5.4
  unarchive: src=/tmp/kustomize.tar.gz dest=/tmp copy=no creates=/tmp/kustomize
  when: ("Version 3.5.4 " not in kustomize_version.stdout) and ansible_architecture == "x86_64"

- name: Copy extracted kustomize executable to /usr/local/bin
  command: mv /tmp/kustomize /usr/local/bin/kustomize
  when: ("Version 3.5.4 " not in kustomize_version.stdout) and ansible_architecture == "x86_64"

- name: Make kustomize executable
  file: path=/usr/local/bin/kustomize mode="u+x,g+x,o+x"
  when: ("Version 3.5.4 " not in kustomize_version.stdout) and ansible_architecture == "x86_64"

- name: Check if krew is installed
  shell: kubectl krew version
  environment:
      PATH: '{{ ansible_env.PATH }}:/home/{{ ansible_env.SUDO_USER }}/.krew/bin'
  become: true
  become_user: '{{ ansible_env.SUDO_USER }}'
  register: krew_version
  failed_when: false
  changed_when: false

- name: create temporary krew install directory
  tempfile:
    state: directory
    suffix: _krew_installer
  register: krew_temp
  when: ("unknown command" in krew_version.stderr) and ansible_architecture == "x86_64"

- name: Download krew 0.3.4
  shell: 
    cmd: curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/download/v0.3.4/krew.{tar.gz,yaml}"
    chdir: "{{ krew_temp.path }}"
    warn: false
  when: ("unknown command" in krew_version.stderr) and ansible_architecture == "x86_64"

- name: Extract krew installer
  unarchive: src={{ krew_temp.path }}/krew.tar.gz dest={{ krew_temp.path }} copy=no
  when: ("unknown command" in krew_version.stderr) and ansible_architecture == "x86_64"

- name: Obtain OS exec name
  shell: uname | tr '[:upper:]' '[:lower:]'
  register: shell_result
  when: ("unknown command" in krew_version.stderr) and ansible_architecture == "x86_64"

- name: Install krew 0.3.4 from tar archive
  shell:
    cmd: ./krew-{{ shell_result.stdout }}_amd64 install --manifest=krew.yaml --archive=krew.tar.gz
    chdir: "{{ krew_temp.path }}"
  become: true
  become_user: '{{ ansible_env.SUDO_USER }}'
  when: ("unknown command" in krew_version.stderr) and ansible_architecture == "x86_64"

- name: Update krew index using installer
  shell:
    cmd: ./krew-{{ shell_result.stdout }}_amd64 update
    chdir: "{{ krew_temp.path }}"
  become: true
  become_user: '{{ ansible_env.SUDO_USER }}'
  when: ("unknown command" in krew_version.stderr) and ansible_architecture == "x86_64"

- name: Remove the temporary krew directory
  file:
    path: "{{ krew_temp.path }}"
    state: absent
  when: ("unknown command" in krew_version.stderr) and ansible_architecture == "x86_64"

- name: Check krew version installed
  command: kubectl krew version
  environment:
      PATH: '{{ ansible_env.PATH }}:/home/{{ ansible_env.SUDO_USER }}/.krew/bin'
  become: true
  become_user: '{{ ansible_env.SUDO_USER }}'
  register: krew_version
  failed_when: false
  changed_when: false

- name: Update krew receipts index
  command: kubectl krew system receipts-upgrade
  environment:
      PATH: '{{ ansible_env.PATH }}:/home/{{ ansible_env.SUDO_USER }}/.krew/bin'
  become: true
  become_user: '{{ ansible_env.SUDO_USER }}'
  when: ("v0.3.4" not in krew_version.stdout) and ansible_architecture == "x86_64"

- name: Update krew index
  command: kubectl krew update
  environment:
      PATH: '{{ ansible_env.PATH }}:/home/{{ ansible_env.SUDO_USER }}/.krew/bin'
  become: true
  become_user: '{{ ansible_env.SUDO_USER }}'
  when: ("v0.3.4" not in krew_version.stdout) and ansible_architecture == "x86_64"

- name: Upgrade krew plugin
  shell: kubectl krew upgrade krew
  environment:
      PATH: '{{ ansible_env.PATH }}:/home/{{ ansible_env.SUDO_USER }}/.krew/bin'
  become: true
  become_user: '{{ ansible_env.SUDO_USER }}'
  register: upgrade_krew
  ignore_errors: yes
  when: ("v0.3.4" not in krew_version.stdout) and ansible_architecture == "x86_64"

- fail: msg="{{ upgrade_krew }}"
  when: ('the newest version is already installed' not in upgrade_krew) and ("v0.3.4" not in krew_version.stdout) and ansible_architecture == "x86_64"
